[{"id":"785fa28c.32493c","type":"tab","label":"Washing Machine","disabled":false,"info":"![enter image description here](https://notenoughtech.com/wp-content/uploads/2019/09/maxresdefault-17.jpg)\n\nWe have all been there at some point, leaving washing in the washing machine for longer than required. I decided to fix this with NodeRED. These are Washing Machine Notifications. \nThere is no need to set up anything as the flow measures the power use of the washing machine and activates when the washing starts and resets when the machine has been swiched off.\n\n - [Complete instructions for **Google Home, Android & Windows**](https://notenoughtech.com/home-automation/washing-machine-notifications/)\n - [Complete instructions for **Alexa**](https://notenoughtech.com/home-automation/alexa-is-my-washing-ready/): \n\n**Features**:\n\n-   Google Home, Android, Alexa, and Windows 10 Notifications \n-   No timers, nothing to set up    \n-   Nagging mode for Google Home    \n-   Cost of washing (supports multi tarifs)    \n\nYou will need the following nodes:\n\n - node-red-contrib-castv2 (for google home)\n - node-red-contrib-join-joaoapps (for android)\n - node-red-contrib-alexa-notifyme\n\nand [Join app](https://play.google.com/store/apps/details?id=com.joaomgcd.join&hl=en_GB) for Android notifications \n\n## You will need **Sonoff POWR2 **buy here:\n\n - [Aliexpress](http://s.click.aliexpress.com/e/by4YqwXQ)\n - [Banggood](https://www.banggood.com/custlink/mGmvyM4HC2)\n - [Gearbest](https://www.gearbest.com/smart-home-controls/pp_1829203.html?wid=1433363&lkid=20102743)\n - [AmazonUK](https://amzn.to/2TJRPN6)\n - [AmazonUS](https://amzn.to/2u9E0bs)\n - [Itead store](http://shrsl.com/1i9e8)\n\n\n\n# Settings\nSee Settings node in the setup menu - each setting had been explained in the comment. Depending on the MQTT message structure, you will need to adjust it to your needs. \n"},{"id":"c18f8f30.55902","type":"group","z":"785fa28c.32493c","name":"Notifications","style":{"label":true,"fill":"#ffffff"},"nodes":["aa8c53ef.627c","43c95891d1432754","e872a9ef1165af74","9bac8e66edded3aa","95a6d22f82dcf55e"],"x":188,"y":293,"w":1424,"h":494},{"id":"21c391bbf4c45c3b","type":"group","z":"785fa28c.32493c","name":"Office Home Notifications","style":{"stroke":"#ffbfbf","label":true},"nodes":["2b9233c13fefca65","56f3073e0892dfdc","21db707a8ed7e04f"],"x":944,"y":439,"w":272,"h":202},{"id":"aa8c53ef.627c","type":"group","z":"785fa28c.32493c","g":"c18f8f30.55902","name":"Goolge Home + Nagging","style":{"stroke":"#0070c0","fill":"#bfdbef","label":true},"nodes":["cfc6b2e7.f36d6","9a49677.8b31498","4ee6cd11.ba2e94","8cfc58e4.1d3178","c03501a8ad428b28","80fbfd993bdacba5","9206597a277c6d1f"],"x":214,"y":319,"w":1372,"h":82},{"id":"e872a9ef1165af74","type":"group","z":"785fa28c.32493c","g":"c18f8f30.55902","name":"Android","style":{"stroke":"#ffcf3f","label":true},"nodes":["97faf35cbe7d19b5"],"x":934,"y":679,"w":152,"h":82},{"id":"86bf2758.c99c18","type":"function","z":"785fa28c.32493c","name":"Settings","func":"//see Setup tab\n\n","outputs":1,"noerr":0,"initialize":"//Google Home Nagging\nvar nagging = {\n    \"status\": true,\n    \"frequency\": 5\n};\nflow.set(\"Nagging\", nagging);\n\n// washing Machine settings\nvar standbyCurrent = {\n    \"LowLimit\": 0.04,\n    \"HighLimit\": 0.085\n};\nflow.set(\"StandbyCurrent\", standbyCurrent);   //average current in standby mode\n\n// washing Machine States\nvar washingStates = {\n    \"Off\": true,\n    \"Standby\": false,\n    \"Washing\": false,\n    \"Finished\": false,\n    \"Collected\": false\n};\nflow.set(\"WashingStates\", washingStates);   //A Collection of the states\n\n//flow.set(\"StandbyCurrent\", 0.04);   //average current in standby mode\nflow.set(\"TotalCurrent\", []);\nflow.set(\"TotalStbyAverage\", []);\nflow.set(\"Resolution\", 5);         // number of measurements taken for rolling current average\nflow.set(\"stbyAveRes\", 3);         // number of measurements taken for rolling Standby average\nflow.set(\"MetricFrequency\", 60);  // how often washing machine reports back\nflow.set(\"average\", 0);\n\nvar cycle = {\n    \"standbyTimeStart\": null,\n    \"standbyTimeStartTxt\": null,\n    \"standbyTimeStop\": null,\n    \"standbyTimeStopTxt\": null,\n    \"washTimeStart\": null,\n    \"washTimeStartTxt\": null,\n    \"washTimeStop\": null,\n    \"washTimeStopTxt\": null,\n    \"washFinishStart\": null,\n    \"washFinishStartTxt\": null,\n    \"washFinishStop\": null,\n    \"washFinishStopTxt\": null\n}\nflow.set(\"CurrentWashCycle\", cycle);\n\n// Operation options\n//           \"off\"#\n//           \"ignore\"\n//           \"standby\"#\n//           \"washing\"#\n//           \"finished\"#\nflow.set(\"WashingHistory\", []);","finalize":"","libs":[],"x":120,"y":60,"wires":[[]]},{"id":"9df27ed3.75732","type":"mqtt in","z":"785fa28c.32493c","name":"Washing Machine","topic":"tele/taz_washingmachine/SENSOR","qos":"0","datatype":"json","broker":"eca6af44.5297b","nl":false,"rap":false,"inputs":0,"x":150,"y":120,"wires":[["ac930862e69670f6"]]},{"id":"cfc6b2e7.f36d6","type":"delay","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"","pauseType":"delay","timeout":"10","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":470,"y":360,"wires":[["8cfc58e4.1d3178"]]},{"id":"9a49677.8b31498","type":"switch","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"Nagging enabled","property":"Nagging.status","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":1030,"y":360,"wires":[["4ee6cd11.ba2e94"]]},{"id":"4ee6cd11.ba2e94","type":"function","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"Random Naggings of my WiFi","func":"var nagging = [\n    \"If you don't take care of washing I will divorce you\",\n    \"Stop being useless and get the washing out\",\n    \"Either you take the washing out right now, or you sleep on the sofa tonight\",\n    \"How many times do I have to tell you to empty the washing machine\",\n    \"Washing machine is not going to empty itself - move your bum\"\n    ];\nvar random = nagging[Math.floor(Math.random() * nagging.length)];\nmsg.payload = random;\n\nnode.status({ fill: \"red\", shape: \"ring\", text: timestamp() + \" Nagging Issued!\" });\n\nreturn msg;\n\nfunction timestamp() {\n    const now = new Date();\n    return now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + \":\";\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1270,"y":360,"wires":[["80fbfd993bdacba5"]]},{"id":"8cfc58e4.1d3178","type":"switch","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"isFinished?","property":"WashingStates.Finished","propertyType":"flow","rules":[{"t":"true"}],"checkall":"true","repair":false,"outputs":1,"x":650,"y":360,"wires":[["9206597a277c6d1f"]]},{"id":"ac930862e69670f6","type":"function","z":"785fa28c.32493c","name":"Calculate power","func":"//CALCULATE POWER BLOCK\n\n//This routine is called everytime there is a poll from the current sensor. Approx 1 per minute.\nvar current = parseFloat(msg.payload.ENERGY.Current);\n\n//reset msg\nvar retMsg = {}; //establish the newMsg object.\nretMsg.payload = {}; //establish the payload object. will be built out later\n\nvar standby = flow.get(\"StandbyCurrent\"); // .LowLimit and .HighLimit\nvar currentWash = flow.get(\"CurrentWashCycle\");\nvar washingStates = flow.get(\"WashingStates\");\n\nvar date = new Date();\nvar dateS = date.getTime() / 1000;\nvar hour = date.getHours();\n\nvar returnAction = \"ignore\";\n\n//##########################\n//Current : Calculate Average stuff\n//##########################\n//Maintain the results array: remove X elementh\nvar res = flow.get(\"Resolution\");\nvar total = flow.get(\"TotalCurrent\");\ntotal.unshift(current); //push recent current reading to total array\n\nif (total[res] === undefined) {\n    flow.set(\"TotalCurrent\", total);\n} else {\n    total.splice(res, 1); //REMOVE res element from total array (stop it growing incrementally)\n    flow.set(\"TotalCurrent\", total);\n}\n//now, calculate the average\nvar sum = total;\nvar average = (sum.reduce(add) / total.length);\nflow.set(\"average\", average);\n\n//##########################\n//Basic standby detect\n//Due to the 'noisy' nature of washing machine standby, we need to average this out a bit for more accurate standby status\n//##########################\nvar totalStbyAve = flow.get(\"TotalStbyAverage\");\nif ((average >= standby.LowLimit && average <= standby.HighLimit)) {\n    totalStbyAve.unshift(1); //push recent standby status to totalStbyAve array\t\n} else {\n    totalStbyAve.unshift(0); //push recent standby status to totalStbyAve array\n}\n\n//Calculate average of STANDBY state. We need to do this to iron out the stupid washing machine wait states!\n//Washing machine, for some odd reason, likes to sit doing nothing for many minutes at a time.\n//Maintain the results array: remove X elementh\nvar stbyAveRes = flow.get(\"stbyAveRes\");\nif (totalStbyAve[stbyAveRes] === undefined) {\n    flow.set(\"TotalStbyAverage\", totalStbyAve);\n} else {\n    totalStbyAve.splice(stbyAveRes, 1); //REMOVE stbyAveRes element from totalStbyAve array (stop it growing incrementally)\n    flow.set(\"TotalStbyAverage\", totalStbyAve);\n}\n//calculate stbyAverage\nvar stbyAveSum = totalStbyAve;\nvar stbyAverage = (stbyAveSum.reduce(add) / totalStbyAve.length);\nflow.set(\"StbyAverage\", stbyAverage);\n\n//##############################################\n//##### STATE PROCESSING               #########\n//##############################################\n\n//#########################################\n//####### OFF (no Current) ################\n//#########################################\nif (average < standby.LowLimit) {\n\n    //(Off->Off) : ignore\n    if (washingStates.Off) {\n        returnAction = \"ignore\";\n    } else {\n        if (washingStates.Standby || washingStates.Washing) {\t// (Standby|Washing->Off)\t\n\n            if (washingStates.Washing) {\n                washingStates.Collected = true; //Transition to off from Washing means collected\n\n                //Log Wash timing data\n                currentWash.washFinishStop = dateS;\n                currentWash.washFinishStopTxt = timestamp();\n\n            } else {\n                washingStates.Collected = false;//Transition to off from Standby\n                currentWash.standbyTimeStop = dateS;\n            }\n\n            //Tidy up\n            washingStates.Off = true;\t\t//\tOff = True\n            washingStates.Standby = false;\t//\tStandby = False (reset)\n            washingStates.Washing = false;\t//\tWashing = False (reset)\n            washingStates.Finished = false;\t//\tFinished = False (reset)\t\t\t\n\n            //Push History\n            var wash = {\n                \"date\": date,\n                \"TotalStandby\": secondsToHms(currentWash.standbyTimeStop - currentWash.standbyTimeStart),\n                \"TotalWash\": secondsToHms(currentWash.washTimeStop - currentWash.washTimeStart),\n                \"TotalFinishWait\": secondsToHms(currentWash.washFinishStop - currentWash.washFinishStart)\n            };\n            var history = flow.get(\"WashingHistory\");\n            history.push(wash);\n            flow.set(\"WashingHistory\", history);\n\n            //Clear cycle details - Its all done now. Used in the notify sections.\n            currentWash.standbyTimeStart = null;\n            currentWash.standbyTimeStartTxt = null;\n            currentWash.standbyTimeStop = null;\n            currentWash.standbyTimeStopTxt = null;\n            currentWash.washTimeStart = null;\n            currentWash.washTimeStartTxt = null;\n            currentWash.washTimeStop = null;\n            currentWash.washTimeStopTxt = null;\n            currentWash.washFinishStart = null;\n            currentWash.washFinishStartTxt = null;\n            currentWash.washFinishStop = null;\n            currentWash.washFinishStopTxt = null;\n\n            node.status({ fill: \"red\", shape: \"dot\", text: timestamp() + \" STANDBY|WASHING->OFF\" });\n\n            returnAction = washingStates.Collected ? \"collected\" : \"off\";\n        }\n    }\n}\n//#########################################\n//####### STANDBY (Minimal Current) #######\n//#########################################\nif (stbyAverage === 1.0) {\n\n    //(Standby->Standby) : ignore\n    if (washingStates.Standby === true) {\n        returnAction = \"ignore\";\n    } else {\n        //(Off->Standby)\n        if (washingStates.Off === true) {\n            washingStates.Collected = false;\t//\tCollected = False\n            washingStates.Off = false;\t\t\t//\tOff = false\n            washingStates.Standby = true;\t\t//\tStandby = true\n            washingStates.Washing = false;\t\t//\tWashing = False\n            washingStates.Finished = false;\t\t//\tFinished = False\n\n            //Start Standby Timers\n            currentWash.standbyTimeStart = dateS;\n            currentWash.standbyTimeStartTxt = timestamp();\n\n            node.status({ fill: \"blue\", shape: \"dot\", text: timestamp() + \" STANDBY\" });\n            returnAction = \"standby\";\n        }\n        //(Washing->Standby)\n        if (washingStates.Washing === true) {\n            washingStates.Collected = false;\t//\tCollected = False\n            washingStates.Off = false;\t\t\t//\tOff = false\n            washingStates.Standby = true;\t\t//\tStandby = true\n            washingStates.Washing = true;\t\t//\tWashing = true\n            washingStates.Finished = true;\t\t//\tFinished = True\n\n            //Stop Wash Timers, start Finish Timers\n            currentWash.washTimeStop = dateS;\n            currentWash.washTimeStopTxt = timestamp();\n            currentWash.washFinishStart = dateS;\n            currentWash.washFinishStartTxt = timestamp();\n\n            node.status({ fill: \"blue\", shape: \"dot\", text: timestamp() + \" WASHING: COMPLETE\" });\n            returnAction = \"finished\";\n        }\n    }\n}\n\n//#######################################################\n//######### WASHING                             #########\n//######### WASHING (OFF=false & STANDBY=false) #########\n//#######################################################\nif (average > standby.HighLimit) {\n\n    //(Washing->Washing) :ignore\n    if (washingStates.washing === true) {\n        returnAction = \"ignore\";\n    } else {\n        //(Off|Standby -> Washing) :\n        if (washingStates.Off || washingStates.Standby) {\n            washingStates.Collected = false;\t//\tCollected = False\n            washingStates.Off = false;\t\t\t//\tOff = False\n            washingStates.Standby = false;\t\t//\tStandby = False\n            washingStates.Washing = true;\t\t//\tWashing = True\n            washingStates.Finished = false;\t\t//\tFinished = False\n\n            if (currentWash.standbyTimeStart === null) {\n                currentWash.standbyTimeStart = dateS;\n                currentWash.standbyTimeStartTxt = timestamp();\n            }\n            currentWash.standbyTimeStop = dateS;\n            currentWash.standbyTimeStopTxt = timestamp();\n            currentWash.washTimeStart = dateS;\n            currentWash.washTimeStartTxt = timestamp();\n\n            node.status({ fill: \"green\", shape: \"dot\", text: timestamp() + \" Machine is WASHING\" });\n            returnAction = \"washing\";\n        } else {\n            returnAction = \"ignore\";\n        }\n    }\n}\n\nif (returnAction === \"ignore\") {\n    retMsg.payload = null; //No point bothering downstream processes when we dont need to\n} else {\n    retMsg.payload = returnAction;\n}\n\n//update flows\nflow.set(\"WashingStates\", washingStates);\nflow.set(\"CurrentWashCycle\", currentWash);\n\nreturn retMsg;\n\n//-----------------------------------------------------------------------------------------\n//##########################################\n//All Functions Here                    ####\n//##########################################\nfunction secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    return ('0' + h).slice(-2) + \"h \" + ('0' + m).slice(-2) + \"min\";\n}\nfunction add(accumulator, a) {\n    return accumulator + a;\n}\nfunction timestamp() {\n    const now = new Date();\n    return now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + \":\";\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":120,"wires":[["78070fe9afea8e9c","5dec6f168aac5b38"]]},{"id":"78070fe9afea8e9c","type":"link out","z":"785fa28c.32493c","name":"Washing Complete","mode":"link","links":["43c95891d1432754"],"x":730,"y":120,"wires":[],"l":true},{"id":"43c95891d1432754","type":"link in","z":"785fa28c.32493c","g":"c18f8f30.55902","name":"Washing Complete_","links":["78070fe9afea8e9c"],"x":450,"y":540,"wires":[["9bac8e66edded3aa"]],"l":true},{"id":"2b9233c13fefca65","type":"cast-to-client","z":"785fa28c.32493c","d":true,"g":"21c391bbf4c45c3b","name":"Office HomeMini","url":"","contentType":"","message":"","language":"en","ip":"192.168.0.199","port":"8009","volume":"70","x":1060,"y":540,"wires":[[]]},{"id":"56f3073e0892dfdc","type":"cast-to-client","z":"785fa28c.32493c","g":"21c391bbf4c45c3b","name":"Passageway HomeMini","url":"","contentType":"","message":"","language":"en","ip":"192.168.0.25","port":"8009","volume":"70","x":1080,"y":600,"wires":[[]]},{"id":"21db707a8ed7e04f","type":"link out","z":"785fa28c.32493c","g":"21c391bbf4c45c3b","name":"HomeMini_Done","mode":"link","links":["c03501a8ad428b28","de0587effabe12f1"],"x":1070,"y":480,"wires":[],"l":true},{"id":"c03501a8ad428b28","type":"link in","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"Check Nag","links":["21db707a8ed7e04f"],"x":300,"y":360,"wires":[["cfc6b2e7.f36d6"]],"l":true},{"id":"80fbfd993bdacba5","type":"link out","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"Nag to Notify","mode":"link","links":["95a6d22f82dcf55e"],"x":1490,"y":360,"wires":[],"l":true},{"id":"9bac8e66edded3aa","type":"function","z":"785fa28c.32493c","g":"c18f8f30.55902","name":"Process Messages","func":"//PROCESS MESSAGES BLOCK\n\n//Entrypoint for wash cycle completing. Valid entries are msg.payload = \n//  * ignore\n//  * off .\n//  * standby .\n//  * washing .\n//  * finished .\n//  * collected .\nvar washingStatus = msg.payload;\n\n//Initialise the return objects\nvar output1_GoogleHome = {};\nvar output2_NtfyMessage = {};\n\nvar currentCycle = flow.get(\"CurrentWashCycle\");\nvar date = new Date();\n\n//populate wash details\nvar wash = {\n    \"date\": date,\n    \"TotalStandby\": secondsToHms(currentCycle.standbyTimeStop - currentCycle.standbyTimeStart),\n    \"TotalWash\": secondsToHms(currentCycle.washTimeStop - currentCycle.washTimeStart),\n    \"TotalFinishWait\": secondsToHms(currentCycle.washFinishStop - currentCycle.washFinishStart)\n};\nvar msgIcon = \"https://cdn3.iconfinder.com/data/icons/household-appliances-2/500/Automatic_automatic_machine_clean_machine_wash_washing-512.png\";\n\n//output1_GoogleHome = {};\n//output2_NtfyMessage = {};\n\nswitch (washingStatus) {\n    //Should only appear once, and thereafter will be 'ignore'\n    case \"off\":\n        output1_GoogleHome = null;\n\n        output2_NtfyMessage.payload = \"Switched off at \" + secondsToHms(currentCycle.washFinishStop);\n        output2_NtfyMessage.headers = {};\n        output2_NtfyMessage.headers['tags'] = 'warning,house';\n        output2_NtfyMessage.headers['Title'] = 'Washing Machine Switched Off';\n        output2_NtfyMessage.headers['Priority'] = 3; //Normal priority\n        output2_NtfyMessage.headers['Icon'] = msgIcon;\n        break;\n\n    //Just come out of OFF. Just turned ON\t\t\n    case \"standby\":\n        output1_GoogleHome = null;\n\n        output2_NtfyMessage.payload = \"Started at \" + currentCycle.standbyTimeStartTxt;\n        output2_NtfyMessage.headers = {};\n        output2_NtfyMessage.headers['tags'] = 'warning,house';\n        output2_NtfyMessage.headers['Title'] = \"Washing Machine in Standby\";\n        output2_NtfyMessage.headers['Priority'] = 3; //Normal priority\n        output2_NtfyMessage.headers['Icon'] = msgIcon;\n        break;\n\n    case \"washing\":\n        output1_GoogleHome = null;\n\n        output2_NtfyMessage.payload = \"Standby time was \" + wash.TotalStandby + \". Started washing at \" + currentCycle.washTimeStartTxt;\n        output2_NtfyMessage.headers = {};\n        output2_NtfyMessage.headers['tags'] = 'warning,house';\n        output2_NtfyMessage.headers['Title'] = \"Washing Machine Started Washing\";\n        output2_NtfyMessage.headers['Priority'] = 3; //Normal priority\n        output2_NtfyMessage.headers['Icon'] = msgIcon;\n        break;\n\n    //This sends a message to the Google Home Mini Speakers as well.\n    case \"finished\":\n        output1_GoogleHome = { payload: \"Washing complete, please collect!\" };\n\n        output2_NtfyMessage.payload = \"Washing duration was \" + wash.TotalWash + \". Completed at \" + currentCycle.washTimeStopTxt;\n        output2_NtfyMessage.headers = {};\n        output2_NtfyMessage.headers['tags'] = 'warning,house';\n        output2_NtfyMessage.headers['Title'] = \"Washing Complete\";\n        output2_NtfyMessage.headers['Priority'] = 3; //Normal priority\n        output2_NtfyMessage.headers['Icon'] = msgIcon;\n        break;\n\n    case \"collected\":\n        output1_GoogleHome = { payload: \"Thanks for collecting the washing! Machine is now off\" };\n\n        output2_NtfyMessage.payload = \"Pickup duration was \" + wash.TotalFinishWait + \". Picked up at \" + currentCycle.washFinishStopTxt;\n        output2_NtfyMessage.headers = {};\n        output2_NtfyMessage.headers['tags'] = 'warning,house';\n        output2_NtfyMessage.headers['Title'] = \"Washing Collected, Machine now Off\";\n        output2_NtfyMessage.headers['Priority'] = 3; //Normal priority\n        output2_NtfyMessage.headers['Icon'] = msgIcon;\n        break;\n\n    default:\n        //do nothing\n        output1_GoogleHome = null;\n        output2_NtfyMessage = null;\n}\n\nif (output2_NtfyMessage != null) {\n    node.status({ fill: \"red\", shape: \"ring\", text: timestamp() + \" ntfy Called\" });\n}\n\nreturn [output1_GoogleHome, output2_NtfyMessage];\n\n//###########################################################\n//Functions here\n//###########################################################\nfunction secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n    return ('0' + h).slice(-2) + \"h \" + ('0' + m).slice(-2) + \"min\";\n}\nfunction timestamp() {\n    const now = new Date();\n    return now.getHours() + ':' + now.getMinutes() + ':' + now.getSeconds() + \":\";\n}","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":540,"wires":[["2b9233c13fefca65","56f3073e0892dfdc","21db707a8ed7e04f"],["97faf35cbe7d19b5"]]},{"id":"97faf35cbe7d19b5","type":"http request","z":"785fa28c.32493c","g":"e872a9ef1165af74","name":"ntfy.sh","method":"POST","ret":"txt","paytoqs":"ignore","url":"https://ntfy.sh/francis_alerts","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1010,"y":720,"wires":[[]]},{"id":"95a6d22f82dcf55e","type":"link in","z":"785fa28c.32493c","g":"c18f8f30.55902","name":"Google Home Speakers","links":["80fbfd993bdacba5"],"x":760,"y":480,"wires":[["2b9233c13fefca65","56f3073e0892dfdc","21db707a8ed7e04f"]],"l":true},{"id":"5566acc6f1485241","type":"api-call-service","z":"785fa28c.32493c","name":"Washing Machine Status","server":"839b592.e73f0a8","version":5,"debugenabled":false,"domain":"input_text","service":"set_value","areaId":[],"deviceId":[],"entityId":["input_text.washing_machine"],"data":"{\"value\":msg.payload}","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":750,"y":60,"wires":[[]]},{"id":"5dec6f168aac5b38","type":"switch","z":"785fa28c.32493c","name":"Null block","property":"payload","propertyType":"msg","rules":[{"t":"nnull"}],"checkall":"true","repair":false,"outputs":1,"x":560,"y":60,"wires":[["5566acc6f1485241"]]},{"id":"9206597a277c6d1f","type":"switch","z":"785fa28c.32493c","g":"aa8c53ef.627c","name":"isNotCollected?","property":"WashingStates.Collected","propertyType":"flow","rules":[{"t":"false"}],"checkall":"true","repair":false,"outputs":1,"x":840,"y":360,"wires":[["9a49677.8b31498"]]},{"id":"42339918e518e770","type":"inject","z":"785fa28c.32493c","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":460,"y":240,"wires":[["8cfc58e4.1d3178"]]},{"id":"eca6af44.5297b","type":"mqtt-broker","name":"MQTT","broker":"core-mosquitto","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"839b592.e73f0a8","type":"server","name":"Home Assistant","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true}]